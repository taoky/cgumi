#![allow(clippy::all)]
#![allow(unknown_lints)]
//! # DBus interface proxy for: `org.freedesktop.systemd1.Manager`
//!
//! This code was generated by `zbus-xmlgen` `3.0.0` from DBus introspection data.
//! Source: `Interface '/org/freedesktop/systemd1' from service 'org.freedesktop.systemd1' on session bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(
    default_service = "org.freedesktop.systemd1",
    interface = "org.freedesktop.systemd1.Manager",
    default_path = "/org/freedesktop/systemd1"
)]
trait Manager {
    /// AbandonScope method
    fn abandon_scope(&self, name: &str) -> zbus::Result<()>;

    /// AddDependencyUnitFiles method
    fn add_dependency_unit_files(
        &self,
        files: &[&str],
        target: &str,
        type_: &str,
        runtime: bool,
        force: bool,
    ) -> zbus::Result<Vec<(String, String, String)>>;

    /// AttachProcessesToUnit method
    fn attach_processes_to_unit(
        &self,
        unit_name: &str,
        subcgroup: &str,
        pids: &[u32],
    ) -> zbus::Result<()>;

    /// BindMountUnit method
    fn bind_mount_unit(
        &self,
        name: &str,
        source: &str,
        destination: &str,
        read_only: bool,
        mkdir: bool,
    ) -> zbus::Result<()>;

    /// CancelJob method
    fn cancel_job(&self, id: u32) -> zbus::Result<()>;

    /// CleanUnit method
    fn clean_unit(&self, name: &str, mask: &[&str]) -> zbus::Result<()>;

    /// ClearJobs method
    fn clear_jobs(&self) -> zbus::Result<()>;

    /// DisableUnitFiles method
    fn disable_unit_files(
        &self,
        files: &[&str],
        runtime: bool,
    ) -> zbus::Result<Vec<(String, String, String)>>;

    /// DisableUnitFilesWithFlags method
    fn disable_unit_files_with_flags(
        &self,
        files: &[&str],
        flags: u64,
    ) -> zbus::Result<Vec<(String, String, String)>>;

    /// Dump method
    fn dump(&self) -> zbus::Result<String>;

    /// DumpByFileDescriptor method
    fn dump_by_file_descriptor(&self) -> zbus::Result<zbus::zvariant::OwnedFd>;

    /// DumpUnitsMatchingPatterns method
    fn dump_units_matching_patterns(&self, patterns: &[&str]) -> zbus::Result<String>;

    /// DumpUnitsMatchingPatternsByFileDescriptor method
    fn dump_units_matching_patterns_by_file_descriptor(
        &self,
        patterns: &[&str],
    ) -> zbus::Result<zbus::zvariant::OwnedFd>;

    /// EnableUnitFiles method
    fn enable_unit_files(
        &self,
        files: &[&str],
        runtime: bool,
        force: bool,
    ) -> zbus::Result<(bool, Vec<(String, String, String)>)>;

    /// EnableUnitFilesWithFlags method
    fn enable_unit_files_with_flags(
        &self,
        files: &[&str],
        flags: u64,
    ) -> zbus::Result<(bool, Vec<(String, String, String)>)>;

    /// EnqueueMarkedJobs method
    fn enqueue_marked_jobs(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// EnqueueUnitJob method
    fn enqueue_unit_job(
        &self,
        name: &str,
        job_type: &str,
        job_mode: &str,
    ) -> zbus::Result<(
        u32,
        zbus::zvariant::OwnedObjectPath,
        String,
        zbus::zvariant::OwnedObjectPath,
        String,
        Vec<(
            u32,
            zbus::zvariant::OwnedObjectPath,
            String,
            zbus::zvariant::OwnedObjectPath,
            String,
        )>,
    )>;

    /// Exit method
    fn exit(&self) -> zbus::Result<()>;

    /// FreezeUnit method
    fn freeze_unit(&self, name: &str) -> zbus::Result<()>;

    /// GetDefaultTarget method
    fn get_default_target(&self) -> zbus::Result<String>;

    /// GetDynamicUsers method
    fn get_dynamic_users(&self) -> zbus::Result<Vec<(u32, String)>>;

    /// GetJob method
    fn get_job(&self, id: u32) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// GetJobAfter method
    fn get_job_after(
        &self,
        id: u32,
    ) -> zbus::Result<
        Vec<(
            u32,
            String,
            String,
            String,
            zbus::zvariant::OwnedObjectPath,
            zbus::zvariant::OwnedObjectPath,
        )>,
    >;

    /// GetJobBefore method
    fn get_job_before(
        &self,
        id: u32,
    ) -> zbus::Result<
        Vec<(
            u32,
            String,
            String,
            String,
            zbus::zvariant::OwnedObjectPath,
            zbus::zvariant::OwnedObjectPath,
        )>,
    >;

    /// GetUnit method
    fn get_unit(&self, name: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// GetUnitByControlGroup method
    fn get_unit_by_control_group(
        &self,
        cgroup: &str,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// GetUnitByInvocationID method
    fn get_unit_by_invocation_id(
        &self,
        invocation_id: &[u8],
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// GetUnitByPID method
    fn get_unit_by_pid(&self, pid: u32) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// GetUnitFileLinks method
    fn get_unit_file_links(&self, name: &str, runtime: bool) -> zbus::Result<Vec<String>>;

    /// GetUnitFileState method
    fn get_unit_file_state(&self, file: &str) -> zbus::Result<String>;

    /// GetUnitProcesses method
    fn get_unit_processes(&self, name: &str) -> zbus::Result<Vec<(String, u32, String)>>;

    /// Halt method
    fn halt(&self) -> zbus::Result<()>;

    /// KExec method
    fn kexec(&self) -> zbus::Result<()>;

    /// KillUnit method
    fn kill_unit(&self, name: &str, whom: &str, signal: i32) -> zbus::Result<()>;

    /// LinkUnitFiles method
    fn link_unit_files(
        &self,
        files: &[&str],
        runtime: bool,
        force: bool,
    ) -> zbus::Result<Vec<(String, String, String)>>;

    /// ListJobs method
    fn list_jobs(
        &self,
    ) -> zbus::Result<
        Vec<(
            u32,
            String,
            String,
            String,
            zbus::zvariant::OwnedObjectPath,
            zbus::zvariant::OwnedObjectPath,
        )>,
    >;

    /// ListUnitFiles method
    fn list_unit_files(&self) -> zbus::Result<Vec<(String, String)>>;

    /// ListUnitFilesByPatterns method
    fn list_unit_files_by_patterns(
        &self,
        states: &[&str],
        patterns: &[&str],
    ) -> zbus::Result<Vec<(String, String)>>;

    /// ListUnits method
    fn list_units(
        &self,
    ) -> zbus::Result<
        Vec<(
            String,
            String,
            String,
            String,
            String,
            String,
            zbus::zvariant::OwnedObjectPath,
            u32,
            String,
            zbus::zvariant::OwnedObjectPath,
        )>,
    >;

    /// ListUnitsByNames method
    fn list_units_by_names(
        &self,
        names: &[&str],
    ) -> zbus::Result<
        Vec<(
            String,
            String,
            String,
            String,
            String,
            String,
            zbus::zvariant::OwnedObjectPath,
            u32,
            String,
            zbus::zvariant::OwnedObjectPath,
        )>,
    >;

    /// ListUnitsByPatterns method
    fn list_units_by_patterns(
        &self,
        states: &[&str],
        patterns: &[&str],
    ) -> zbus::Result<
        Vec<(
            String,
            String,
            String,
            String,
            String,
            String,
            zbus::zvariant::OwnedObjectPath,
            u32,
            String,
            zbus::zvariant::OwnedObjectPath,
        )>,
    >;

    /// ListUnitsFiltered method
    fn list_units_filtered(
        &self,
        states: &[&str],
    ) -> zbus::Result<
        Vec<(
            String,
            String,
            String,
            String,
            String,
            String,
            zbus::zvariant::OwnedObjectPath,
            u32,
            String,
            zbus::zvariant::OwnedObjectPath,
        )>,
    >;

    /// LoadUnit method
    fn load_unit(&self, name: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// LookupDynamicUserByName method
    fn lookup_dynamic_user_by_name(&self, name: &str) -> zbus::Result<u32>;

    /// LookupDynamicUserByUID method
    fn lookup_dynamic_user_by_uid(&self, uid: u32) -> zbus::Result<String>;

    /// MaskUnitFiles method
    fn mask_unit_files(
        &self,
        files: &[&str],
        runtime: bool,
        force: bool,
    ) -> zbus::Result<Vec<(String, String, String)>>;

    /// MountImageUnit method
    fn mount_image_unit(
        &self,
        name: &str,
        source: &str,
        destination: &str,
        read_only: bool,
        mkdir: bool,
        options: &[(&str, &str)],
    ) -> zbus::Result<()>;

    /// PowerOff method
    fn power_off(&self) -> zbus::Result<()>;

    /// PresetAllUnitFiles method
    fn preset_all_unit_files(
        &self,
        mode: &str,
        runtime: bool,
        force: bool,
    ) -> zbus::Result<Vec<(String, String, String)>>;

    /// PresetUnitFiles method
    fn preset_unit_files(
        &self,
        files: &[&str],
        runtime: bool,
        force: bool,
    ) -> zbus::Result<(bool, Vec<(String, String, String)>)>;

    /// PresetUnitFilesWithMode method
    fn preset_unit_files_with_mode(
        &self,
        files: &[&str],
        mode: &str,
        runtime: bool,
        force: bool,
    ) -> zbus::Result<(bool, Vec<(String, String, String)>)>;

    /// Reboot method
    fn reboot(&self) -> zbus::Result<()>;

    /// ReenableUnitFiles method
    fn reenable_unit_files(
        &self,
        files: &[&str],
        runtime: bool,
        force: bool,
    ) -> zbus::Result<(bool, Vec<(String, String, String)>)>;

    /// Reexecute method
    fn reexecute(&self) -> zbus::Result<()>;

    /// RefUnit method
    fn ref_unit(&self, name: &str) -> zbus::Result<()>;

    /// Reload method
    fn reload(&self) -> zbus::Result<()>;

    /// ReloadOrRestartUnit method
    fn reload_or_restart_unit(
        &self,
        name: &str,
        mode: &str,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// ReloadOrTryRestartUnit method
    fn reload_or_try_restart_unit(
        &self,
        name: &str,
        mode: &str,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// ReloadUnit method
    fn reload_unit(&self, name: &str, mode: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// ResetFailed method
    fn reset_failed(&self) -> zbus::Result<()>;

    /// ResetFailedUnit method
    fn reset_failed_unit(&self, name: &str) -> zbus::Result<()>;

    /// RestartUnit method
    fn restart_unit(&self, name: &str, mode: &str)
        -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// RevertUnitFiles method
    fn revert_unit_files(&self, files: &[&str]) -> zbus::Result<Vec<(String, String, String)>>;

    /// SetDefaultTarget method
    fn set_default_target(
        &self,
        name: &str,
        force: bool,
    ) -> zbus::Result<Vec<(String, String, String)>>;

    /// SetEnvironment method
    fn set_environment(&self, assignments: &[&str]) -> zbus::Result<()>;

    /// SetExitCode method
    fn set_exit_code(&self, number: u8) -> zbus::Result<()>;

    /// SetShowStatus method
    fn set_show_status(&self, mode: &str) -> zbus::Result<()>;

    /// SetUnitProperties method
    fn set_unit_properties(
        &self,
        name: &str,
        runtime: bool,
        properties: &[(&str, zbus::zvariant::Value<'_>)],
    ) -> zbus::Result<()>;

    /// StartTransientUnit method
    fn start_transient_unit(
        &self,
        name: &str,
        mode: &str,
        properties: &[(&str, zbus::zvariant::Value<'_>)],
        aux: &[(&str, &[(&str, zbus::zvariant::Value<'_>)])],
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// StartUnit method
    fn start_unit(&self, name: &str, mode: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// StartUnitReplace method
    fn start_unit_replace(
        &self,
        old_unit: &str,
        new_unit: &str,
        mode: &str,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// StartUnitWithFlags method
    fn start_unit_with_flags(
        &self,
        name: &str,
        mode: &str,
        flags: u64,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// StopUnit method
    fn stop_unit(&self, name: &str, mode: &str) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Subscribe method
    fn subscribe(&self) -> zbus::Result<()>;

    /// SwitchRoot method
    fn switch_root(&self, new_root: &str, init: &str) -> zbus::Result<()>;

    /// ThawUnit method
    fn thaw_unit(&self, name: &str) -> zbus::Result<()>;

    /// TryRestartUnit method
    fn try_restart_unit(
        &self,
        name: &str,
        mode: &str,
    ) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// UnmaskUnitFiles method
    fn unmask_unit_files(
        &self,
        files: &[&str],
        runtime: bool,
    ) -> zbus::Result<Vec<(String, String, String)>>;

    /// UnrefUnit method
    fn unref_unit(&self, name: &str) -> zbus::Result<()>;

    /// UnsetAndSetEnvironment method
    fn unset_and_set_environment(&self, names: &[&str], assignments: &[&str]) -> zbus::Result<()>;

    /// UnsetEnvironment method
    fn unset_environment(&self, names: &[&str]) -> zbus::Result<()>;

    /// Unsubscribe method
    fn unsubscribe(&self) -> zbus::Result<()>;

    /// JobNew signal
    #[dbus_proxy(signal)]
    fn job_new(&self, id: u32, job: zbus::zvariant::ObjectPath<'_>, unit: &str)
        -> zbus::Result<()>;

    /// JobRemoved signal
    #[dbus_proxy(signal)]
    fn job_removed(
        &self,
        id: u32,
        job: zbus::zvariant::ObjectPath<'_>,
        unit: &str,
        result: &str,
    ) -> zbus::Result<()>;

    /// Reloading signal
    #[dbus_proxy(signal)]
    fn reloading(&self, active: bool) -> zbus::Result<()>;

    /// StartupFinished signal
    #[dbus_proxy(signal)]
    fn startup_finished(
        &self,
        firmware: u64,
        loader: u64,
        kernel: u64,
        initrd: u64,
        userspace: u64,
        total: u64,
    ) -> zbus::Result<()>;

    /// UnitFilesChanged signal
    #[dbus_proxy(signal)]
    fn unit_files_changed(&self) -> zbus::Result<()>;

    /// UnitNew signal
    #[dbus_proxy(signal)]
    fn unit_new(&self, id: &str, unit: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// UnitRemoved signal
    #[dbus_proxy(signal)]
    fn unit_removed(&self, id: &str, unit: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// Architecture property
    #[dbus_proxy(property)]
    fn architecture(&self) -> zbus::Result<String>;

    /// ConfirmSpawn property
    #[dbus_proxy(property)]
    fn confirm_spawn(&self) -> zbus::Result<bool>;

    /// ControlGroup property
    #[dbus_proxy(property)]
    fn control_group(&self) -> zbus::Result<String>;

    /// CtrlAltDelBurstAction property
    #[dbus_proxy(property)]
    fn ctrl_alt_del_burst_action(&self) -> zbus::Result<String>;

    /// DefaultBlockIOAccounting property
    #[dbus_proxy(property)]
    fn default_block_ioaccounting(&self) -> zbus::Result<bool>;

    /// DefaultCPUAccounting property
    #[dbus_proxy(property)]
    fn default_cpuaccounting(&self) -> zbus::Result<bool>;

    /// DefaultDeviceTimeoutUSec property
    #[dbus_proxy(property)]
    fn default_device_timeout_usec(&self) -> zbus::Result<u64>;

    /// DefaultLimitAS property
    #[dbus_proxy(property)]
    fn default_limit_as(&self) -> zbus::Result<u64>;

    /// DefaultLimitASSoft property
    #[dbus_proxy(property)]
    fn default_limit_assoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitCORE property
    #[dbus_proxy(property)]
    fn default_limit_core(&self) -> zbus::Result<u64>;

    /// DefaultLimitCORESoft property
    #[dbus_proxy(property)]
    fn default_limit_coresoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitCPU property
    #[dbus_proxy(property)]
    fn default_limit_cpu(&self) -> zbus::Result<u64>;

    /// DefaultLimitCPUSoft property
    #[dbus_proxy(property)]
    fn default_limit_cpusoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitDATA property
    #[dbus_proxy(property)]
    fn default_limit_data(&self) -> zbus::Result<u64>;

    /// DefaultLimitDATASoft property
    #[dbus_proxy(property)]
    fn default_limit_datasoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitFSIZE property
    #[dbus_proxy(property)]
    fn default_limit_fsize(&self) -> zbus::Result<u64>;

    /// DefaultLimitFSIZESoft property
    #[dbus_proxy(property)]
    fn default_limit_fsizesoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitLOCKS property
    #[dbus_proxy(property)]
    fn default_limit_locks(&self) -> zbus::Result<u64>;

    /// DefaultLimitLOCKSSoft property
    #[dbus_proxy(property)]
    fn default_limit_lockssoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitMEMLOCK property
    #[dbus_proxy(property)]
    fn default_limit_memlock(&self) -> zbus::Result<u64>;

    /// DefaultLimitMEMLOCKSoft property
    #[dbus_proxy(property)]
    fn default_limit_memlocksoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitMSGQUEUE property
    #[dbus_proxy(property)]
    fn default_limit_msgqueue(&self) -> zbus::Result<u64>;

    /// DefaultLimitMSGQUEUESoft property
    #[dbus_proxy(property)]
    fn default_limit_msgqueuesoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitNICE property
    #[dbus_proxy(property)]
    fn default_limit_nice(&self) -> zbus::Result<u64>;

    /// DefaultLimitNICESoft property
    #[dbus_proxy(property)]
    fn default_limit_nicesoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitNOFILE property
    #[dbus_proxy(property)]
    fn default_limit_nofile(&self) -> zbus::Result<u64>;

    /// DefaultLimitNOFILESoft property
    #[dbus_proxy(property)]
    fn default_limit_nofilesoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitNPROC property
    #[dbus_proxy(property)]
    fn default_limit_nproc(&self) -> zbus::Result<u64>;

    /// DefaultLimitNPROCSoft property
    #[dbus_proxy(property)]
    fn default_limit_nprocsoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitRSS property
    #[dbus_proxy(property)]
    fn default_limit_rss(&self) -> zbus::Result<u64>;

    /// DefaultLimitRSSSoft property
    #[dbus_proxy(property)]
    fn default_limit_rsssoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitRTPRIO property
    #[dbus_proxy(property)]
    fn default_limit_rtprio(&self) -> zbus::Result<u64>;

    /// DefaultLimitRTPRIOSoft property
    #[dbus_proxy(property)]
    fn default_limit_rtpriosoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitRTTIME property
    #[dbus_proxy(property)]
    fn default_limit_rttime(&self) -> zbus::Result<u64>;

    /// DefaultLimitRTTIMESoft property
    #[dbus_proxy(property)]
    fn default_limit_rttimesoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitSIGPENDING property
    #[dbus_proxy(property)]
    fn default_limit_sigpending(&self) -> zbus::Result<u64>;

    /// DefaultLimitSIGPENDINGSoft property
    #[dbus_proxy(property)]
    fn default_limit_sigpendingsoft(&self) -> zbus::Result<u64>;

    /// DefaultLimitSTACK property
    #[dbus_proxy(property)]
    fn default_limit_stack(&self) -> zbus::Result<u64>;

    /// DefaultLimitSTACKSoft property
    #[dbus_proxy(property)]
    fn default_limit_stacksoft(&self) -> zbus::Result<u64>;

    /// DefaultMemoryAccounting property
    #[dbus_proxy(property)]
    fn default_memory_accounting(&self) -> zbus::Result<bool>;

    /// DefaultOOMPolicy property
    #[dbus_proxy(property)]
    fn default_oompolicy(&self) -> zbus::Result<String>;

    /// DefaultOOMScoreAdjust property
    #[dbus_proxy(property)]
    fn default_oomscore_adjust(&self) -> zbus::Result<i32>;

    /// DefaultRestartUSec property
    #[dbus_proxy(property)]
    fn default_restart_usec(&self) -> zbus::Result<u64>;

    /// DefaultStandardError property
    #[dbus_proxy(property)]
    fn default_standard_error(&self) -> zbus::Result<String>;

    /// DefaultStandardOutput property
    #[dbus_proxy(property)]
    fn default_standard_output(&self) -> zbus::Result<String>;

    /// DefaultStartLimitBurst property
    #[dbus_proxy(property)]
    fn default_start_limit_burst(&self) -> zbus::Result<u32>;

    /// DefaultStartLimitIntervalUSec property
    #[dbus_proxy(property)]
    fn default_start_limit_interval_usec(&self) -> zbus::Result<u64>;

    /// DefaultTasksAccounting property
    #[dbus_proxy(property)]
    fn default_tasks_accounting(&self) -> zbus::Result<bool>;

    /// DefaultTasksMax property
    #[dbus_proxy(property)]
    fn default_tasks_max(&self) -> zbus::Result<u64>;

    /// DefaultTimeoutAbortUSec property
    #[dbus_proxy(property)]
    fn default_timeout_abort_usec(&self) -> zbus::Result<u64>;

    /// DefaultTimeoutStartUSec property
    #[dbus_proxy(property)]
    fn default_timeout_start_usec(&self) -> zbus::Result<u64>;

    /// DefaultTimeoutStopUSec property
    #[dbus_proxy(property)]
    fn default_timeout_stop_usec(&self) -> zbus::Result<u64>;

    /// DefaultTimerAccuracyUSec property
    #[dbus_proxy(property)]
    fn default_timer_accuracy_usec(&self) -> zbus::Result<u64>;

    /// Environment property
    #[dbus_proxy(property)]
    fn environment(&self) -> zbus::Result<Vec<String>>;

    /// ExitCode property
    #[dbus_proxy(property)]
    fn exit_code(&self) -> zbus::Result<u8>;

    /// Features property
    #[dbus_proxy(property)]
    fn features(&self) -> zbus::Result<String>;

    /// FinishTimestamp property
    #[dbus_proxy(property)]
    fn finish_timestamp(&self) -> zbus::Result<u64>;

    /// FinishTimestampMonotonic property
    #[dbus_proxy(property)]
    fn finish_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// FirmwareTimestamp property
    #[dbus_proxy(property)]
    fn firmware_timestamp(&self) -> zbus::Result<u64>;

    /// FirmwareTimestampMonotonic property
    #[dbus_proxy(property)]
    fn firmware_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// GeneratorsFinishTimestamp property
    #[dbus_proxy(property)]
    fn generators_finish_timestamp(&self) -> zbus::Result<u64>;

    /// GeneratorsFinishTimestampMonotonic property
    #[dbus_proxy(property)]
    fn generators_finish_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// GeneratorsStartTimestamp property
    #[dbus_proxy(property)]
    fn generators_start_timestamp(&self) -> zbus::Result<u64>;

    /// GeneratorsStartTimestampMonotonic property
    #[dbus_proxy(property)]
    fn generators_start_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// InitRDGeneratorsFinishTimestamp property
    #[dbus_proxy(property)]
    fn init_rdgenerators_finish_timestamp(&self) -> zbus::Result<u64>;

    /// InitRDGeneratorsFinishTimestampMonotonic property
    #[dbus_proxy(property)]
    fn init_rdgenerators_finish_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// InitRDGeneratorsStartTimestamp property
    #[dbus_proxy(property)]
    fn init_rdgenerators_start_timestamp(&self) -> zbus::Result<u64>;

    /// InitRDGeneratorsStartTimestampMonotonic property
    #[dbus_proxy(property)]
    fn init_rdgenerators_start_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// InitRDSecurityFinishTimestamp property
    #[dbus_proxy(property)]
    fn init_rdsecurity_finish_timestamp(&self) -> zbus::Result<u64>;

    /// InitRDSecurityFinishTimestampMonotonic property
    #[dbus_proxy(property)]
    fn init_rdsecurity_finish_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// InitRDSecurityStartTimestamp property
    #[dbus_proxy(property)]
    fn init_rdsecurity_start_timestamp(&self) -> zbus::Result<u64>;

    /// InitRDSecurityStartTimestampMonotonic property
    #[dbus_proxy(property)]
    fn init_rdsecurity_start_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// InitRDTimestamp property
    #[dbus_proxy(property)]
    fn init_rdtimestamp(&self) -> zbus::Result<u64>;

    /// InitRDTimestampMonotonic property
    #[dbus_proxy(property)]
    fn init_rdtimestamp_monotonic(&self) -> zbus::Result<u64>;

    /// InitRDUnitsLoadFinishTimestamp property
    #[dbus_proxy(property)]
    fn init_rdunits_load_finish_timestamp(&self) -> zbus::Result<u64>;

    /// InitRDUnitsLoadFinishTimestampMonotonic property
    #[dbus_proxy(property)]
    fn init_rdunits_load_finish_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// InitRDUnitsLoadStartTimestamp property
    #[dbus_proxy(property)]
    fn init_rdunits_load_start_timestamp(&self) -> zbus::Result<u64>;

    /// InitRDUnitsLoadStartTimestampMonotonic property
    #[dbus_proxy(property)]
    fn init_rdunits_load_start_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// KExecWatchdogUSec property
    #[dbus_proxy(property)]
    fn kexec_watchdog_usec(&self) -> zbus::Result<u64>;
    #[dbus_proxy(property)]
    fn set_kexec_watchdog_usec(&self, value: u64) -> zbus::Result<()>;

    /// KernelTimestamp property
    #[dbus_proxy(property)]
    fn kernel_timestamp(&self) -> zbus::Result<u64>;

    /// KernelTimestampMonotonic property
    #[dbus_proxy(property)]
    fn kernel_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// LoaderTimestamp property
    #[dbus_proxy(property)]
    fn loader_timestamp(&self) -> zbus::Result<u64>;

    /// LoaderTimestampMonotonic property
    #[dbus_proxy(property)]
    fn loader_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// LogLevel property
    #[dbus_proxy(property)]
    fn log_level(&self) -> zbus::Result<String>;
    #[dbus_proxy(property)]
    fn set_log_level(&self, value: &str) -> zbus::Result<()>;

    /// LogTarget property
    #[dbus_proxy(property)]
    fn log_target(&self) -> zbus::Result<String>;
    #[dbus_proxy(property)]
    fn set_log_target(&self, value: &str) -> zbus::Result<()>;

    /// NFailedJobs property
    #[dbus_proxy(property)]
    fn nfailed_jobs(&self) -> zbus::Result<u32>;

    /// NFailedUnits property
    #[dbus_proxy(property)]
    fn nfailed_units(&self) -> zbus::Result<u32>;

    /// NInstalledJobs property
    #[dbus_proxy(property)]
    fn ninstalled_jobs(&self) -> zbus::Result<u32>;

    /// NJobs property
    #[dbus_proxy(property)]
    fn njobs(&self) -> zbus::Result<u32>;

    /// NNames property
    #[dbus_proxy(property)]
    fn nnames(&self) -> zbus::Result<u32>;

    /// Progress property
    #[dbus_proxy(property)]
    fn progress(&self) -> zbus::Result<f64>;

    /// RebootWatchdogUSec property
    #[dbus_proxy(property)]
    fn reboot_watchdog_usec(&self) -> zbus::Result<u64>;
    #[dbus_proxy(property)]
    fn set_reboot_watchdog_usec(&self, value: u64) -> zbus::Result<()>;

    /// RuntimeWatchdogPreGovernor property
    #[dbus_proxy(property)]
    fn runtime_watchdog_pre_governor(&self) -> zbus::Result<String>;
    #[dbus_proxy(property)]
    fn set_runtime_watchdog_pre_governor(&self, value: &str) -> zbus::Result<()>;

    /// RuntimeWatchdogPreUSec property
    #[dbus_proxy(property)]
    fn runtime_watchdog_pre_usec(&self) -> zbus::Result<u64>;
    #[dbus_proxy(property)]
    fn set_runtime_watchdog_pre_usec(&self, value: u64) -> zbus::Result<()>;

    /// RuntimeWatchdogUSec property
    #[dbus_proxy(property)]
    fn runtime_watchdog_usec(&self) -> zbus::Result<u64>;
    #[dbus_proxy(property)]
    fn set_runtime_watchdog_usec(&self, value: u64) -> zbus::Result<()>;

    /// SecurityFinishTimestamp property
    #[dbus_proxy(property)]
    fn security_finish_timestamp(&self) -> zbus::Result<u64>;

    /// SecurityFinishTimestampMonotonic property
    #[dbus_proxy(property)]
    fn security_finish_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// SecurityStartTimestamp property
    #[dbus_proxy(property)]
    fn security_start_timestamp(&self) -> zbus::Result<u64>;

    /// SecurityStartTimestampMonotonic property
    #[dbus_proxy(property)]
    fn security_start_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// ServiceWatchdogs property
    #[dbus_proxy(property)]
    fn service_watchdogs(&self) -> zbus::Result<bool>;
    #[dbus_proxy(property)]
    fn set_service_watchdogs(&self, value: bool) -> zbus::Result<()>;

    /// ShowStatus property
    #[dbus_proxy(property)]
    fn show_status(&self) -> zbus::Result<bool>;

    /// SystemState property
    #[dbus_proxy(property)]
    fn system_state(&self) -> zbus::Result<String>;

    /// Tainted property
    #[dbus_proxy(property)]
    fn tainted(&self) -> zbus::Result<String>;

    /// TimerSlackNSec property
    #[dbus_proxy(property)]
    fn timer_slack_nsec(&self) -> zbus::Result<u64>;

    /// UnitPath property
    #[dbus_proxy(property)]
    fn unit_path(&self) -> zbus::Result<Vec<String>>;

    /// UnitsLoadFinishTimestamp property
    #[dbus_proxy(property)]
    fn units_load_finish_timestamp(&self) -> zbus::Result<u64>;

    /// UnitsLoadFinishTimestampMonotonic property
    #[dbus_proxy(property)]
    fn units_load_finish_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// UnitsLoadStartTimestamp property
    #[dbus_proxy(property)]
    fn units_load_start_timestamp(&self) -> zbus::Result<u64>;

    /// UnitsLoadStartTimestampMonotonic property
    #[dbus_proxy(property)]
    fn units_load_start_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// UnitsLoadTimestamp property
    #[dbus_proxy(property)]
    fn units_load_timestamp(&self) -> zbus::Result<u64>;

    /// UnitsLoadTimestampMonotonic property
    #[dbus_proxy(property)]
    fn units_load_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// UserspaceTimestamp property
    #[dbus_proxy(property)]
    fn userspace_timestamp(&self) -> zbus::Result<u64>;

    /// UserspaceTimestampMonotonic property
    #[dbus_proxy(property)]
    fn userspace_timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// Version property
    #[dbus_proxy(property)]
    fn version(&self) -> zbus::Result<String>;

    /// Virtualization property
    #[dbus_proxy(property)]
    fn virtualization(&self) -> zbus::Result<String>;

    /// WatchdogDevice property
    #[dbus_proxy(property)]
    fn watchdog_device(&self) -> zbus::Result<String>;

    /// WatchdogLastPingTimestamp property
    #[dbus_proxy(property)]
    fn watchdog_last_ping_timestamp(&self) -> zbus::Result<u64>;

    /// WatchdogLastPingTimestampMonotonic property
    #[dbus_proxy(property)]
    fn watchdog_last_ping_timestamp_monotonic(&self) -> zbus::Result<u64>;
}

#[dbus_proxy(
    default_service = "org.freedesktop.systemd1",
    interface = "org.freedesktop.systemd1.Scope"
)]
trait Scope {
    /// Abandon method
    fn abandon(&self) -> zbus::Result<()>;

    /// AttachProcesses method
    fn attach_processes(&self, subcgroup: &str, pids: &[u32]) -> zbus::Result<()>;

    /// GetProcesses method
    fn get_processes(&self) -> zbus::Result<Vec<(String, u32, String)>>;

    /// RequestStop signal
    #[dbus_proxy(signal)]
    fn request_stop(&self) -> zbus::Result<()>;

    /// AllowedCPUs property
    #[dbus_proxy(property)]
    fn allowed_cpus(&self) -> zbus::Result<Vec<u8>>;

    /// AllowedMemoryNodes property
    #[dbus_proxy(property)]
    fn allowed_memory_nodes(&self) -> zbus::Result<Vec<u8>>;

    /// BPFProgram property
    #[dbus_proxy(property)]
    fn bpfprogram(&self) -> zbus::Result<Vec<(String, String)>>;

    /// BlockIOAccounting property
    #[dbus_proxy(property)]
    fn block_ioaccounting(&self) -> zbus::Result<bool>;

    /// BlockIODeviceWeight property
    #[dbus_proxy(property)]
    fn block_iodevice_weight(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// BlockIOReadBandwidth property
    #[dbus_proxy(property)]
    fn block_ioread_bandwidth(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// BlockIOWeight property
    #[dbus_proxy(property)]
    fn block_ioweight(&self) -> zbus::Result<u64>;

    /// BlockIOWriteBandwidth property
    #[dbus_proxy(property)]
    fn block_iowrite_bandwidth(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// CPUAccounting property
    #[dbus_proxy(property)]
    fn cpuaccounting(&self) -> zbus::Result<bool>;

    /// CPUQuotaPerSecUSec property
    #[dbus_proxy(property)]
    fn cpuquota_per_sec_usec(&self) -> zbus::Result<u64>;

    /// CPUQuotaPeriodUSec property
    #[dbus_proxy(property)]
    fn cpuquota_period_usec(&self) -> zbus::Result<u64>;

    /// CPUShares property
    #[dbus_proxy(property)]
    fn cpushares(&self) -> zbus::Result<u64>;

    /// CPUUsageNSec property
    #[dbus_proxy(property)]
    fn cpuusage_nsec(&self) -> zbus::Result<u64>;

    /// CPUWeight property
    #[dbus_proxy(property)]
    fn cpuweight(&self) -> zbus::Result<u64>;

    /// ControlGroup property
    #[dbus_proxy(property)]
    fn control_group(&self) -> zbus::Result<String>;

    /// ControlGroupId property
    #[dbus_proxy(property)]
    fn control_group_id(&self) -> zbus::Result<u64>;

    /// Controller property
    #[dbus_proxy(property)]
    fn controller(&self) -> zbus::Result<String>;

    /// DefaultMemoryLow property
    #[dbus_proxy(property)]
    fn default_memory_low(&self) -> zbus::Result<u64>;

    /// DefaultMemoryMin property
    #[dbus_proxy(property)]
    fn default_memory_min(&self) -> zbus::Result<u64>;

    /// Delegate property
    #[dbus_proxy(property)]
    fn delegate(&self) -> zbus::Result<bool>;

    /// DelegateControllers property
    #[dbus_proxy(property)]
    fn delegate_controllers(&self) -> zbus::Result<Vec<String>>;

    /// DeviceAllow property
    #[dbus_proxy(property)]
    fn device_allow(&self) -> zbus::Result<Vec<(String, String)>>;

    /// DevicePolicy property
    #[dbus_proxy(property)]
    fn device_policy(&self) -> zbus::Result<String>;

    /// DisableControllers property
    #[dbus_proxy(property)]
    fn disable_controllers(&self) -> zbus::Result<Vec<String>>;

    /// EffectiveCPUs property
    #[dbus_proxy(property)]
    fn effective_cpus(&self) -> zbus::Result<Vec<u8>>;

    /// EffectiveMemoryNodes property
    #[dbus_proxy(property)]
    fn effective_memory_nodes(&self) -> zbus::Result<Vec<u8>>;

    /// FinalKillSignal property
    #[dbus_proxy(property)]
    fn final_kill_signal(&self) -> zbus::Result<i32>;

    /// IOAccounting property
    #[dbus_proxy(property)]
    fn ioaccounting(&self) -> zbus::Result<bool>;

    /// IODeviceLatencyTargetUSec property
    #[dbus_proxy(property)]
    fn iodevice_latency_target_usec(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IODeviceWeight property
    #[dbus_proxy(property)]
    fn iodevice_weight(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IOReadBandwidthMax property
    #[dbus_proxy(property)]
    fn ioread_bandwidth_max(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IOReadBytes property
    #[dbus_proxy(property)]
    fn ioread_bytes(&self) -> zbus::Result<u64>;

    /// IOReadIOPSMax property
    #[dbus_proxy(property)]
    fn ioread_iopsmax(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IOReadOperations property
    #[dbus_proxy(property)]
    fn ioread_operations(&self) -> zbus::Result<u64>;

    /// IOWeight property
    #[dbus_proxy(property)]
    fn ioweight(&self) -> zbus::Result<u64>;

    /// IOWriteBandwidthMax property
    #[dbus_proxy(property)]
    fn iowrite_bandwidth_max(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IOWriteBytes property
    #[dbus_proxy(property)]
    fn iowrite_bytes(&self) -> zbus::Result<u64>;

    /// IOWriteIOPSMax property
    #[dbus_proxy(property)]
    fn iowrite_iopsmax(&self) -> zbus::Result<Vec<(String, u64)>>;

    /// IOWriteOperations property
    #[dbus_proxy(property)]
    fn iowrite_operations(&self) -> zbus::Result<u64>;

    /// IPAccounting property
    #[dbus_proxy(property)]
    fn ipaccounting(&self) -> zbus::Result<bool>;

    /// IPAddressAllow property
    #[dbus_proxy(property)]
    fn ipaddress_allow(&self) -> zbus::Result<Vec<(i32, Vec<u8>, u32)>>;

    /// IPAddressDeny property
    #[dbus_proxy(property)]
    fn ipaddress_deny(&self) -> zbus::Result<Vec<(i32, Vec<u8>, u32)>>;

    /// IPEgressBytes property
    #[dbus_proxy(property)]
    fn ipegress_bytes(&self) -> zbus::Result<u64>;

    /// IPEgressFilterPath property
    #[dbus_proxy(property)]
    fn ipegress_filter_path(&self) -> zbus::Result<Vec<String>>;

    /// IPEgressPackets property
    #[dbus_proxy(property)]
    fn ipegress_packets(&self) -> zbus::Result<u64>;

    /// IPIngressBytes property
    #[dbus_proxy(property)]
    fn ipingress_bytes(&self) -> zbus::Result<u64>;

    /// IPIngressFilterPath property
    #[dbus_proxy(property)]
    fn ipingress_filter_path(&self) -> zbus::Result<Vec<String>>;

    /// IPIngressPackets property
    #[dbus_proxy(property)]
    fn ipingress_packets(&self) -> zbus::Result<u64>;

    /// KillMode property
    #[dbus_proxy(property)]
    fn kill_mode(&self) -> zbus::Result<String>;

    /// KillSignal property
    #[dbus_proxy(property)]
    fn kill_signal(&self) -> zbus::Result<i32>;

    /// ManagedOOMMemoryPressure property
    #[dbus_proxy(property)]
    fn managed_oommemory_pressure(&self) -> zbus::Result<String>;

    /// ManagedOOMMemoryPressureLimit property
    #[dbus_proxy(property)]
    fn managed_oommemory_pressure_limit(&self) -> zbus::Result<u32>;

    /// ManagedOOMPreference property
    #[dbus_proxy(property)]
    fn managed_oompreference(&self) -> zbus::Result<String>;

    /// ManagedOOMSwap property
    #[dbus_proxy(property)]
    fn managed_oomswap(&self) -> zbus::Result<String>;

    /// MemoryAccounting property
    #[dbus_proxy(property)]
    fn memory_accounting(&self) -> zbus::Result<bool>;

    /// MemoryAvailable property
    #[dbus_proxy(property)]
    fn memory_available(&self) -> zbus::Result<u64>;

    /// MemoryCurrent property
    #[dbus_proxy(property)]
    fn memory_current(&self) -> zbus::Result<u64>;

    /// MemoryHigh property
    #[dbus_proxy(property)]
    fn memory_high(&self) -> zbus::Result<u64>;

    /// MemoryLimit property
    #[dbus_proxy(property)]
    fn memory_limit(&self) -> zbus::Result<u64>;

    /// MemoryLow property
    #[dbus_proxy(property)]
    fn memory_low(&self) -> zbus::Result<u64>;

    /// MemoryMax property
    #[dbus_proxy(property)]
    fn memory_max(&self) -> zbus::Result<u64>;

    /// MemoryMin property
    #[dbus_proxy(property)]
    fn memory_min(&self) -> zbus::Result<u64>;

    /// MemorySwapMax property
    #[dbus_proxy(property)]
    fn memory_swap_max(&self) -> zbus::Result<u64>;

    /// RestartKillSignal property
    #[dbus_proxy(property)]
    fn restart_kill_signal(&self) -> zbus::Result<i32>;

    /// RestrictNetworkInterfaces property
    #[dbus_proxy(property)]
    fn restrict_network_interfaces(&self) -> zbus::Result<(bool, Vec<String>)>;

    /// Result property
    #[dbus_proxy(property)]
    fn result(&self) -> zbus::Result<String>;

    /// RuntimeMaxUSec property
    #[dbus_proxy(property)]
    fn runtime_max_usec(&self) -> zbus::Result<u64>;

    /// RuntimeRandomizedExtraUSec property
    #[dbus_proxy(property)]
    fn runtime_randomized_extra_usec(&self) -> zbus::Result<u64>;

    /// SendSIGHUP property
    #[dbus_proxy(property)]
    fn send_sighup(&self) -> zbus::Result<bool>;

    /// SendSIGKILL property
    #[dbus_proxy(property)]
    fn send_sigkill(&self) -> zbus::Result<bool>;

    /// Slice property
    #[dbus_proxy(property)]
    fn slice(&self) -> zbus::Result<String>;

    /// SocketBindAllow property
    #[dbus_proxy(property)]
    fn socket_bind_allow(&self) -> zbus::Result<Vec<(i32, i32, u16, u16)>>;

    /// SocketBindDeny property
    #[dbus_proxy(property)]
    fn socket_bind_deny(&self) -> zbus::Result<Vec<(i32, i32, u16, u16)>>;

    /// StartupAllowedCPUs property
    #[dbus_proxy(property)]
    fn startup_allowed_cpus(&self) -> zbus::Result<Vec<u8>>;

    /// StartupAllowedMemoryNodes property
    #[dbus_proxy(property)]
    fn startup_allowed_memory_nodes(&self) -> zbus::Result<Vec<u8>>;

    /// StartupBlockIOWeight property
    #[dbus_proxy(property)]
    fn startup_block_ioweight(&self) -> zbus::Result<u64>;

    /// StartupCPUShares property
    #[dbus_proxy(property)]
    fn startup_cpushares(&self) -> zbus::Result<u64>;

    /// StartupCPUWeight property
    #[dbus_proxy(property)]
    fn startup_cpuweight(&self) -> zbus::Result<u64>;

    /// StartupIOWeight property
    #[dbus_proxy(property)]
    fn startup_ioweight(&self) -> zbus::Result<u64>;

    /// TasksAccounting property
    #[dbus_proxy(property)]
    fn tasks_accounting(&self) -> zbus::Result<bool>;

    /// TasksCurrent property
    #[dbus_proxy(property)]
    fn tasks_current(&self) -> zbus::Result<u64>;

    /// TasksMax property
    #[dbus_proxy(property)]
    fn tasks_max(&self) -> zbus::Result<u64>;

    /// TimeoutStopUSec property
    #[dbus_proxy(property)]
    fn timeout_stop_usec(&self) -> zbus::Result<u64>;

    /// WatchdogSignal property
    #[dbus_proxy(property)]
    fn watchdog_signal(&self) -> zbus::Result<i32>;
}
